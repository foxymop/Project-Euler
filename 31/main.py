
import math

coins = [.01, .02, .05, .1, .2, .5, 1, 2]

# 1 way to make 1 cent [.01]
# 2 ways to make 2 cents [.02, 2x0.01]
# 4 ways to make 5 cents [.05, 2x.02+.01, .02+3x.01, 5x.01]
# 11 ways to make 10 cents [.1, 2x.05, .05+2x.02+.01, .05+.02+3x.01, .05+5x.01,
#                           5x.02, 4x.02+2x.01, 3x.02+4x.01, 2x.02+6x.01, .02+8x.01, 10x.01]

x10 = 11

# X20 ways to make 20 cents
#  .2, 2x.1, .1+2x.05, .1+.05+2*.02+.01, .1+.05+.02+3x.01, .1+.05+5x.01... 6 options
#  .1+5x.02... 6 options, 5,4,3,2,1,0 x 0.2
#  4x.05... 1 option
#  3x.05+2x.02+.01... 3 options 2,1,0 x .02
#  2x.05+5*.02... 6 options 5,4,3,2,1 x .02
#  .05+7x.02+.01... 8 options 7,6,5,4,3,2,1 x 0.2
#  10x.02... 11 options 10,9,8,7,6,5,4,3,2,1,0 x .02
# X20 = 6+6+1+3+6+8+11 = 41

# 1, 1, 1, 3, 6, 1, 3, 6, 8, 11

x20 = 1+1+1+3+6+1+3+6+8+11
x20 = 1+1+10+29
print("20 pence: ", x20)

xp = 1 + x10 + 1+3+6+8+11
print(xp)

# X50 ways to make 50 cents:
#  .5, 2x.2+.1, 2x.2+2x.05, 2x.2+.05+2x.02+.01, 2x.2+.05+.02+3x.01, 2x.2+.05+5x.01 ... 6 options
#  .2+3x.1 ... 1 option
#  .2+2x.1+2x.05 ... 1 option
#  .2+2x.1+.05 + 2,1,0 x .02 ... 3 options
#  .2+.1+4x.05 ... 1 option
#  .2+.1+3x.05 + 2,1,0 x .02 ... 3 options
#  .2+.1+2x.05 + 5,4,3,2,1,0 x .02 ... 6 options
#  .2+.1+.05 + 7,6,5,4,3,2,1,0 x .02 ... 8 options
#  .2+.1 + 10,9,8,7,6,5,4,3,2,1,0 x .02 ... 11 options
#  .2+6*.05 ... 1 option
#  .2+5*.05 + 2,1,0 x .02 ... 3 options
#  .2+4*.05 + 5,4,3,2,1,0 x .02 ... 6 options
#  .2+3*.05 + 7,6,5,4,3,2,1,0 x .02 ... 8 options
#  .2+2*.05 + 10,9,8,7,6,5,4,3,2,1,0 x .02 ... 11 options
#  .2+.05 + 12,11,10,9,8,7,6,5,4,3,2,1,0 x .02 ... 13 options
#  .2 + 15,14,13,12... 16 options

#  5x.1 ... 1 option
#  4x.1+2x.05 ... 1 option
#  4x.1+.05 + 2,1,0 x .02 ... 3 options
#  4x.1 + 5,4,3,2,1,0 x .02 ... 6 options
#  ...
#  3x.1+4x.05 ... 1 then 3 then 6 then 8 then 11 ... 29 options
#  2x.1+6x.05 ... 1 then 3 then 6, 8, 11, 13, 16 ... 58 options
#  1x.1+8x.05 ... 1, 3, 6, 8, 11, 13, 16, 18, 21 ... 97 options
#  10x.05 ... 1,3,6,8,11,13,16,18,21,23,26       ... 146 options

# X50 = 6+1+1+3+1+3+6+8+11+1+3+6+8+11+13+16+1+1+3+6+29+58+97+146

x50 = 6+1+1+3+1+3+6+8+11+1+3+6+8+11+13+16+1+1+3+6+29+58+97+146
x50 = 6+1+1+3+1+3+6+8+11+1+3+6+8+11+13+16+1+10+29+58+97+146
x50 = 1+10+29+58+1+10+29+58+97+146

x50 = 1
x50 = x50 + 1+10
x50 = x50 + 1+10+29+58
x50 = x50 + 1+10+29+58+97+146
print("50 pence: ", x50)

# 1, 1, 1 3, 1, 1 3, 1 3 6 8 11, ... 1 + 1 + 1 + 3 + 1 + 1 + 3 = 1, 1 3 6
# 1 3 6 8 11 13 16,
# 1, 1 3 6, 1 3 6 8 11,
# 1 3 6 8 11 13 16,
# 1 3 6 8 11 13 16 18 21,
# 1 3 6 8 11 13 16 18 21 23 26,

# 1                                 = 1
# 1 3 6                             = 10
# 1 3 6 8 11                        = 29
# 1 3 6 8 11 13 16                  = 58
# 1 3 6 8 11 13 16 18 21            = 97
# 1 3 6 8 11 13 16 18 21 23 26      = 146

# 1, 1 3 6, 1 3 6 8 11, 1 3 6 8 11 13 16
# 1, 1 3 6, 1 3 6 8 11, 1 3 6 8 11 13 16, 1 3 6 8 11 13 16 18 21, 1 3 6 8 11 13 16 18 21 23 26

# 1, 10, 29, 58, 1, 10, 29, 58, 97, 146



# .5 ... 1
# 2x.2   1+10
# 1x.2   1+10+29+58
# 0x.2   1+10+29+58+97+146

xp = 1
xp = xp + 1+10
xp = xp + 1+10+29+58
xp = xp + 1+10+29+58+97+146
print(xp)

# 1 Pound:

#  1, 2x.5, .5+2x.2+.1, .5+2x.2+2x.05 ... 1,1,1,1
#  .5+2x.2+.05 + 2,1,0 x .02 ... 3 options
#  .5+2x.2 + 5,4,3,2,1,0 * .02 ... 6 options
#  .5+.2+3x.1, .5+.2+2x.1+2x.05, .5+.2+2x.1+.05 + 2,1,0 x .02 ... 1,1,3 ... 5 options
#  .5+.2+2x.1 + 5,4,3,2,1 x .02 ... 6 options
#  .5+.2+.1+4x.05 ... 1 option
#  .5+.2+.1+3x.05 + 2,1,0 x .02 ... 3 options
#  .5+.2+.1+2x.05 + 5,4,3,2,1,0 x .02 ... 6 options
#  .5+.2+.1+.05 + 7,6,5,4,3,2,1,0 x .02 ... 8 options
#  .5+.2+.1 + 10,8,8,7,6,5,4,3,2,1,0 x .02 ... 11 options
#  .5+.2+6x.05 ... 1
#  5x.05 ... 3
#  4x.05 ... 6
#  ... 8,11,13,16
#  .5+5x.1 ... 1
#  .5+4x.1+2x.05 ... 1 then 3 then 6 ... 10
#  .5+3x.1 ... 1,3,6,8,11 ... 29
#  .5+2x.1 ... 1,3,6,8,11,13,16 ... 58
#  .5+.1 ... 1,3,6,8,11,13,16,18,21 ... 97
# .5 + ... 1,3,6,8,11,13,16,18,21,23,26 ... 146

# There should be exactly 440 possibilities listed above, 1+x50.

#  5x.2 ... 1
#  4x.2+2x.1 ... 1
#  4x.2+.1+2x.05 ... 1
#  4x.2+.1+.05 + 2,1,0 x .02 ... 3
#  6 options
#  1,3,6,8,11 ... 29
#  3x.2+4x.1 ... 1
#  3x.2+3x.1 + 2,1,0 x .05 ... 1,3,6 ... 10
#  3x.2+2x.1 ... 1,3,6,8,11 ... 29
#  3x.2+.1 ... 1,3,6,8,11,13,16 ... 58
#  3x.2 ... 1,3,6,8,11,13,16,18,21 ... 97
#  2x.2+6x.1 ... 1
#  2x.2+5x.1 ... 1,3,6 ... 10
#  2x.2+4x.1 ... 1,3,6,8,11 ... 29
#  2x.2+3x.1 ... 1,3,6,8,11,13,16 ... 58
#  97
#  146
#  1,3,6,8,11,13,16,18,21,23,26,28,31 = 205
#  1x.2 ... 1,10,29,58,97,146,205,274,353
#  0x.2 ... 1,10,29,58,97,146,205,274,353,442,541

x1 = 1
x1 = x1 + 1
x1 = x1 + 1+10
x1 = x1 + 1+10+29+58
x1 = x1 + 1+10+29+58+97+146
x1 = x1 + 1
x1 = x1 + 1+10+29
x1 = x1 + 1+10+29+58+97
x1 = x1 + 1+10+29+58+97+146+205
x1 = x1 + 1+10+29+58+97+146+205+274+353
x1 = x1 + 1+10+29+58+97+146+205+274+353+442+541

print("1 pound: ", x1)

xp = 1
xp = xp + 1+10+29+58
xp = xp + 1+10+29+58+97+146
xp = xp + 1
xp = xp + 1+10+29
xp = xp + 1+10+29+58+97
xp = xp + 1+10+29+58+97+146+205
xp = xp + 1+10+29+58+97+146+205+274+353
xp = xp + 1+10+29+58+97+146+205+274+353+442+541


xp = 1 + x50 # 1P and 50p + all 50p combinations
xp = xp + 1  # 5x.2
xp = xp + 1+10+29 # 4x.2
xp = xp + 1+10+29+58+97 # 3x.2
xp = xp + 1+10+29+58+97+146+205 # 2x.2
xp = xp + 1+10+29+58+97+146+205+274+353 # 1x.2
xp = xp + 1+10+29+58+97+146+205+274+353+442+541 # 0x.2
print(xp)


# 2 Pounds:

# 2, 2x1, 1+2x.5 ... 1,1,1
# 1+.5+2x.2+.1 ... 1,3,6 ... 10
# 1+.5+.2 + ... 1,3,6,8,11,13,16 ... 29
# 1+.5+5x.1 ... 1,10,29,58,97,146
# 1+5x.2 ... 1
# 1+4x.2+2x.1 ... 1,10,29
# 1+3x.2 + ... 1,10,29,58,97
# 1+2x.2 + ... 1,10,29,58,97,146,205
# 1+.2 + ... 1,10,29,58,97,146,205,274,353
# 1+10+29+58+97+146+205+274+353+442+541

# So up until this point we have just been splitting up the first pound into pence. The number of ways of
# combining 1p,2p,5p,10p,20p 50p, 1P to make a pound is precisely equal to x1 above. Now once we split up the
# second pound we can add the number below to x1 and a few other options to get our answer x2.

# 4x.5  ...  1
# 3x.5+2*.2  1+10
#      1     1+10+29+58
#      0     1+10+29+58+97+146
# 2x.5+5*.2  1
#      4     1+10+29
#      3     1+10+29+58+97
#      2     1+10+29+58+97+146+205
#      1     1+10+29+58+97+146+205+274+353
#      0     1+10+29+58+97+146+205+274+353+442+541
# 1x.5+7*.2  1+10
#      6     1+10+29+58
#      5     1+10+29+58+97+146
#      4     1+10+29+58+97+146+205+274
#      3     1+10+29+58+97+146+205+274+353+442
#      2     1+10+29+58+97+146+205+274+353+442+541+650
#      1     1+10+29+58+97+146+205+274+353+442+541+650+769+898
#      0     1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186
# 10x.2      1
#  9         1+10+29
#  8         1+10+29+58+97
#  7         1+10+29+58+97+146+205
#  6         1+10+29+58+97+146+205+274+353
#  5         1+10+29+58+97+146+205+274+353+442+541
#  4         1+10+29+58+97+146+205+274+353+442+541+650+769
#  3         1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037
#  2         1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186+1345
#  1         1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186+1345+1514+1693
#  0         1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186+1345+1514+1693+1882+2081


# So a pattern is starting to emerge, we probably can stop counting. We have a variable x1 which describes
# the number of ways we can make 1 pound. Because we're going from 1 pound to 2 pounds for this variable x2,
# we can take the number of ways of breaking up the first 1 pound, and multiply it by the number of ways of
# breaking up the second pound, so essentially x1^2. Does this make sense?

# On the left hand side of all of the counting is the description of what we're counting. Not every single
# combination is listed, but we try to account for them all. If we did list each and every combination on the
# left hand side, we would just have our answer given by the number of items in the list.

# I think some of the key points to remember are that we're going from 1P to 2P, and that all of the coins
# divide evenly into 1P and 2P. For instance, when going from 20p to 50p, we couldn't simply take x20^2 because
# it lacks the same symmetry. And going from 50p to 1P, the 20p coin divides into 1P but not 50p. So going from
# 1P to 2P we'll try x1^2+1 and see if that is the correct answer.

#x2 = math.pow(x1,2)+1
#print(x2)

# That is wrong. We need to count distinct answers, so counting 1+2x.5 is the same as 2x.5+1, so the correct
# solution is much smaller. Maybe we can go back to counting, we just need to take account of all the ways
# that 2P can be made from 50p, 20p, 10p, 5p, 2p, and 1p.

x2 = 1+x1

x2 = x2 + 1
x2 = x2 + 1+10
x2 = x2 + 1+10+29+58
x2 = x2 + 1+10+29+58+97+146
x2 = x2 + 1
x2 = x2 + 1+10+29
x2 = x2 + 1+10+29+58+97
x2 = x2 + 1+10+29+58+97+146+205
x2 = x2 + 1+10+29+58+97+146+205+274+353
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541
x2 = x2 + 1+10
x2 = x2 + 1+10+29+58
x2 = x2 + 1+10+29+58+97+146
x2 = x2 + 1+10+29+58+97+146+205+274
x2 = x2 + 1+10+29+58+97+146+205+274+353+442
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650+769+898
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186
x2 = x2 + 1
x2 = x2 + 1+10+29
x2 = x2 + 1+10+29+58+97
x2 = x2 + 1+10+29+58+97+146+205
x2 = x2 + 1+10+29+58+97+146+205+274+353
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650+769
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186+1345
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186+1345+1514+1693
x2 = x2 + 1+10+29+58+97+146+205+274+353+442+541+650+769+898+1037+1186+1345+1514+1693+1882+2081

print("2 pounds: ", x2)



def list_1(x):
    return 1 + 2*((x-1)%2) + 5*((x-1)//2)

def list_2(x):
    sum = 0
    for i in range(1, 2*x):
        sum = sum + list_1(i)
    return sum

def list_3(x):
    sum = 0
    for i in range(1,x+1):
        sum = sum + list_2(i)
    return sum

#for i in range(1,10):
#    print(list_1(i))
#for i in range(1,10):
#    print(list_2(i))
#for i in range(1,10):
#    print(list_3(i))


x = 1 + x1
x = x + list_3(1)
x = x + list_3(2) + list_3(4) + list_3(6)
x = x + list_3(1) + list_3(3) + list_3(5) + list_3(7) + list_3(9) + list_3(11)
x = x + list_3(2) + list_3(4) + list_3(6) + list_3(8) + list_3(10) + list_3(12) + list_3(14) + list_3(16)
x = x + list_3(1) + list_3(3) + list_3(5) + list_3(7) + list_3(9) + list_3(11) + list_3(13) + list_3(15) + list_3(17) + list_3(19) + list_3(21)

print(x)
